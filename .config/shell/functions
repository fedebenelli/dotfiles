#!/bin/sh

# =========================================================================={{{
#  Colors
# -----------------------------------------------------------------------------
yellow() {
	echo "\e[1;33m$1\e[m"
}

green() {
	echo "\e[1;32m$1\e[m"
}

red() {
	echo "\e[1;31m$1\e[m"
}

blue() {
	echo "\e[1;34m$1\e[m"
}

blinking-green() {
	echo "\e[5;32m$1\e[m"
}
# ==========================================================================}}}

onmodify() {
    TARGET=${1:-.}; shift
    CMD="$@"

    echo "$TARGET" "$CMD"

    echo "$TARGET" | entr "$CMD"
}

get_paper() {
	doi="$1"
	sci_hub="sci-hub.se"
	pdf_link="$(curl https://$sci_hub/$doi | grep -o "$sci_hub.*pdf" | head -n1)"
	pdf_name="$(curl https://$sci_hub/$doi | grep title | cut -d'|' -f2)"
	pdf_name="${pdf_name# *}"
	pdf_name="${pdf_name%* }"
	wget "$pdf_link" -O "${PAPERS_DIR:-${XDG_DOWNLOAD_DIR:-$HOME/Downloads}}/$pdf_name.pdf"
}

nap() {
	mkdir "$1"
	cp $HOME/docs/programming/arduino/Makefile "$1/"
	cd $1
	cp "${XDG_TEMPLATES_DIR:-$HOME/Templates}/arduino/default.ino" "$1.ino"
	$EDITOR $1.ino
}

hline() {
	printf "\n <"
	#bat=$(battery)
	#printf "%s" "$bat"
	dat=$(date +%d/%m-%H:%M:%S)
	len=$(($(tput cols) - ${#bat} - ${#dat} - 4))
	for i in $(seq 1 $len); do
		printf "-"
	done
	printf "[$dat]\n\n"
}

pdftitle() {
	title="$(pdfinfo "$1" | grep Title | cut -d':' -f2)"
	# double echo to delete whitespace at the start,
	#  guess could just do another strint cut.
	echo "$(echo ${title% .*})"
}

wttr() {
	curl wttr.in/cordoba,ar
}

ltx2wd() {
	file="$1"
	name="${file%.tex}"
	latexml "$file" --dest="$name".xml
	latexmlpost --dest "$name".html "$name".xml
	pandoc -f html -t docx -o "$name".docx "$name".html
}

vw () {
    if [[ $# == 0 ]]
    then
        nvim +'VimwikiIndex'
    elif [[ $1 == 'git' ]]
    then
        git -C ~/docs/vimwiki/ ${@:2}
    else
        echo 'Usage: vimwiki [git] [args ...]'
    fi
}

plot() {
    tmp_file="/tmp/$(date +%s)"
    plt="plot"
    data="$(cat /dev/stdin)"

    echo "$data" > $tmp_file

    n_columns=$(echo "$data" | awk '{print NF}' | head -n1)
    columns=( $(echo "$data" | head -n1) )

    for i in $(seq 2 $((n_columns))); do
        plt="$plt '$tmp_file' using 1:$i with lines title '${columns[i-1]}',\
        "
    done

    plt="$plt; pause mouse close"

    echo $plt
    echo "$data"

    echo "$data" | gnuplot -p -e "$plt"
}

envelplot() {
	plt=""
	[ $1 = "log" ] && plt="$plt set logscale y;"
	plt="$plt; plot"
	i=0
	for file in $(ls envelout*); do
		echo "$file"
		i=$((i+1))
		awk '{print $1, $2}' "$file" | grep ^[0-9] > "tmp_$i"
		plt="$plt \"tmp_$i\" using 1:2 w lp ps 0.5 title \"envelope$i\",\
		"
	done
	plt="${plt%,*};"
	plt="$plt pause mouse close"
	echo "$plt"
	gnuplot -p -e "$plt"
	rm tmp*
}

fenvelplot() {
	[ $1="PT" ] && xlb="set xlabel \"T [K]\""
	[ $1="PX" ] && xlb="set xlabel \"{/Symbol a}\""
	if [ -z $2 ]; then
		dirs=( . )
	else
		args=("$@")
		dirs=("${args[@]:1}")
	fi
	ylb="set ylabel \"P [bar]\""
	for dir in ${dirs[@]}; do
	str="set terminal qt font ',14';
	$ylb;
	$xlb;
	plot for [f in system(\"ls $dir/fenvelopes_output/env-*$1*\")] f u 4:5 w lp t system(\"echo \".f.\" | cut -d'/' -f2\"), \
	     for [f in system(\"ls $dir/fenvelopes_output/env-*$1*\")] f index \"critical\" u 1:2 w p pt 7 lc rgb \"black\" notitle;
	pause mouse close"
	gnuplot -p -e "$str" & disown
	done
	}

tplot() {
	gnuplot -p -e "
    set terminal dumb size $COLUMNS, 30;
    set autoscale;
    plot '-' using 1:2 with lines notitle;
    pause mouse close
    "
}

intload(){
	source /home/${USER}/intel/oneapi/setvars.sh
}

gamma(){
	gamma_file=~/.config/screen_gamma
	if [ -f $gamma_file ]; then
		echo
	else
		echo 1 > $gamma_file
	fi
	gamma_value=$(< $gamma_file)
	echo $gamma_value
	delta=$1
	new=$(echo "$gamma_value + $delta" | bc)

	xgamma -gamma "$new" 
	echo "$new" > "$gamma_file"
}

fproj(){
	dirname="$1"
	mkdir "$dirname"
	cd "$dirname"
	echo "
program main
   implicit none
end program main" > main.f90
	cp ${XDG_TEMPLATES_DIR}/programming/fortran/Makefile .
	git status && git add .
}
