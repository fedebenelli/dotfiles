#!/bin/sh


yellow() {
	echo "\e[1;33m$1\e[m"
}

green() {
	echo "\e[1;32m$1\e[m"
}

red() {
	echo "\e[1;31m$1\e[m"
}

blue() {
	echo "\e[1;34m$1\e[m"
}

blinking-green() {
	echo "\e[5;32m$1\e[m"
}

onmodify() {
    TARGET=${1:-.}; shift
    CMD="$@"
    
    echo "$TARGET" "$CMD"

    echo "$TARGET" | entr "$CMD"
}

#yta() {
#    mpv --ytdl-format=bestaudio ytdl://ytsearch:"$*"
#}

get_paper() {
	doi="$1"
	sci_hub="sci-hub.se"
	pdf_link="$(curl https://$sci_hub/$doi | grep -o "$sci_hub.*pdf" | head -n1)"
	pdf_name="$(curl https://$sci_hub/$doi | grep title | cut -d'|' -f2)"
	pdf_name="${pdf_name# *}"
	pdf_name="${pdf_name%* }"
	wget "$pdf_link" -O "${PAPERS_DIR:-${XDG_DOWNLOAD_DIR:-$HOME/Downloads}}/$pdf_name.pdf"
}

nap() {
	mkdir "$1"
	cp $HOME/docs/programming/arduino/Makefile "$1/"
	cd $1
	cp "${XDG_TEMPLATES_DIR:-$HOME/Templates}/arduino/default.ino" "$1.ino"
	$EDITOR $1.ino
}

hline() {
	printf "\n <"
	#bat=$(battery)
	#printf "%s" "$bat"
	dat=$(date +%d/%m-%H:%M:%S)
	len=$(($(tput cols) - ${#bat} - ${#dat} - 4))
	for i in $(seq 1 $len); do
		printf "-"
	done
	printf "[$dat]\n\n"
}

pdftitle() {
	title="$(pdfinfo "$1" | grep Title | cut -d':' -f2)"
	# double echo to delete whitespace at the start,
	#  guess could just do another strint cut.
	echo "$(echo ${title% .*})"
}

wttr() {
	curl wttr.in/cordoba,ar
}

ltx2wd() {
	file="$1"
	name="${file%.tex}"
	latexml "$file" --dest="$name".xml
	latexmlpost --dest "$name".html "$name".xml
	pandoc -f html -t docx -o "$name".docx "$name".html
}

vw () {
    if [[ $# == 0 ]]
    then
        nvim +'VimwikiIndex'
    elif [[ $1 == 'git' ]]
    then
        git -C ~/docs/vimwiki/ ${@:2}
    else
        echo 'Usage: vimwiki [git] [args ...]'
    fi
}

plot() {
    tmp_file="/tmp/$(date +%s)"
    plt="plot"
    data="$(cat /dev/stdin)"

    tmp_file="$HOME/.cache/plot$(date +%s)"
    
    echo "$data" > $tmp_file

    ncolumns=$(echo "$data" | awk '{print NF}' | head -n1)
    labels=( $(echo $data | head -n1) )

    re='^[0-9]+$'

    if ! [[ ${labels[0]} =~ $re ]] ; then
	data=$(echo "$data" | tail -n+2)
	plt="set xlabel \"${labels[0]}\";"
    else
	labels=()
	for i in $(seq 2 $((ncolumns))); do
	    labels[$i]=$i
	done
    fi

    for i in $(seq 0 $((ncolumns))); do
	echo ${labels[$i]}
    done

    plt="${plt}plot \"$tmp_file\" u 1:2 with lines title \"${labels[1]}\",\
    "
    for i in $(seq 3 $((ncolumns))); do
	plt="$plt \"$tmp_file\" using 1:$i with lines title \"${labels[$((i-1))]}\",\
        "
    done

    plt="${plt%,*};"
    plt="$plt pause mouse close"
    echo "$plt" > $HOME/.cache/gnuplotscript
    echo "$data" | gnuplot -p $HOME/.cache/gnuplotscript
}

envelplot() {
	plt=""
	[ $1 = "log" ] && plt="$plt set logscale y;"
	plt="$plt; plot"
	i=0
	for file in $(ls envelout*); do
		echo "$file"
		i=$((i+1))
		awk '{print $1, $2}' "$file" | grep ^[0-9] > "tmp_$i"
		plt="$plt \"tmp_$i\" using 1:2 title \"envelope$i\",\
		"
	done
	plt="${plt%,*};"
	plt="$plt pause mouse close"
	echo "$plt"
	gnuplot -p -e "$plt"
	rm tmp*
}

tplot() {
	gnuplot -p -e "
    set terminal dumb size $COLUMNS, 30;
    set autoscale;
    plot '-' using 1:2 with lines notitle;
    pause mouse close
    "
}

intload(){
	source /home/${USER}/intel/oneapi/setvars.sh
}
